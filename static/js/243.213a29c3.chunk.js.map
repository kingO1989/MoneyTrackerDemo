{"version":3,"file":"static/js/243.213a29c3.chunk.js","mappings":"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","sources":["Pages/Components/Transaction/TransactionTotalView.js","Pages/Transaction.js"],"sourcesContent":["/* eslint-disable no-multi-spaces */\r\n/* eslint-disable no-unneeded-ternary */\r\n/* eslint-disable react/display-name */\r\n/* eslint-disable multiline-ternary */\r\n/* eslint-disable comma-dangle */\r\n/* eslint-disable react/prop-types */\r\n/* eslint-disable operator-linebreak */\r\n/* eslint-disable react/jsx-key */\r\n/* eslint-disable indent */\r\n/* eslint-disable prefer-const */\r\n/* eslint-disable react/react-in-jsx-scope */\r\n/* eslint-disable no-undef */\r\n/* eslint-disable spaced-comment */\r\n/* eslint-disable semi */\r\n/* eslint-disable curly */\r\n/* eslint-disable array-callback-return */\r\n/* eslint-disable padded-blocks */\r\n/* eslint-disable space-before-function-paren */\r\n/* eslint-disable no-trailing-spaces */\r\n/* eslint-disable no-multiple-empty-lines */\r\n/* eslint-disable no-unused-vars */\r\n/* eslint-disable quotes */\r\nimport { useEffect, useState, useContext } from \"react\";\r\nimport AppContext from \"../../../Context/AppContext\";\r\n\r\nexport const TransactionTotalView = () => {\r\n    const { accounts, expense, income, networth, setNetworth, totalIncome, totalExpenses } = useContext(AppContext);\r\n\r\n    useEffect(\r\n        () => {\r\n            console.log(accounts)\r\n        }\r\n        , [accounts]\r\n    )\r\n    return (\r\n        <div className=\"Transaction-view\">\r\n            <h5> Transaction Summary\r\n            </h5>\r\n            {accounts ? accounts.map((account) => (\r\n\r\n                <details>\r\n                    <summary> <b> {account.name + \"'s\"} summary</b></summary>\r\n                    <table>\r\n\r\n                        <tbody>\r\n\r\n\r\n                            <tr  ><td><b>Total Income</b> ::<span className='income'>\r\n                                {\r\n                                    account.totalIncomeInCurrency\r\n                                }\r\n                            </span></td>\r\n\r\n\r\n                            </tr>\r\n\r\n\r\n                            <tr ><td><b>Total Expense</b> ::<span className='expense'>\r\n                                {\r\n                                    account.totalExpenseInCurrency\r\n                                }\r\n                            </span></td>\r\n                            </tr>\r\n                            <tr className='' ><td><b>Networth</b> ::{\r\n                                account.networth\r\n                            }</td>\r\n                            </tr>\r\n\r\n\r\n                        </tbody>\r\n\r\n                    </table>\r\n                </details>\r\n\r\n\r\n            )) : \"\"\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","/* eslint-disable no-multi-spaces */\r\n/* eslint-disable no-unneeded-ternary */\r\n/* eslint-disable react/display-name */\r\n/* eslint-disable multiline-ternary */\r\n/* eslint-disable comma-dangle */\r\n/* eslint-disable react/prop-types */\r\n/* eslint-disable operator-linebreak */\r\n/* eslint-disable react/jsx-key */\r\n/* eslint-disable indent */\r\n/* eslint-disable prefer-const */\r\n/* eslint-disable react/react-in-jsx-scope */\r\n/* eslint-disable no-undef */\r\n/* eslint-disable spaced-comment */\r\n/* eslint-disable semi */\r\n/* eslint-disable curly */\r\n/* eslint-disable array-callback-return */\r\n/* eslint-disable padded-blocks */\r\n/* eslint-disable space-before-function-paren */\r\n/* eslint-disable no-trailing-spaces */\r\n/* eslint-disable no-multiple-empty-lines */\r\n/* eslint-disable no-unused-vars */\r\n/* eslint-disable quotes */\r\n\r\nimport { useEffect, useState, useContext } from \"react\";\r\nimport RecentTransactionView from \"./Components/Transaction/RecentTransactionView\";\r\nimport { TransactionTotalView } from \"./Components/Transaction/TransactionTotalView\";\r\nimport AppContext from \"../Context/AppContext\";\r\nimport AddTranactionForm from \"./Components/Transaction/AddTransactionForm\";\r\nimport Body from \"./Components/Helpers/Body\";\r\nimport Button from \"./Components/Helpers/Button\";\r\nimport \"./Transaction.css\"\r\nimport Dialog from \"./Components/Helpers/Dialog\";\r\n\r\nconst Transaction = () => {\r\n    const { currency, accounts, setAccount } = useContext(AppContext);\r\n    const [addTransactionBtnClicked, setAddTransactionBtnClicked] = useState(false)\r\n\r\n\r\n    function clone(o) {\r\n        return JSON.parse(JSON.stringify(o))\r\n    }\r\n\r\n\r\n\r\n    function validator(value) {\r\n        if (value === undefined) { return false } else return true\r\n    }\r\n\r\n\r\n    function wrappCurrency(val) {\r\n        return currency + \"\" + val\r\n    }\r\n\r\n    function UpdateAccount(accountClone) {\r\n\r\n\r\n        accountClone = accountClone.map((account) => {\r\n            console.log(account)\r\n            let expensesum = 0\r\n            for (let i = 0; i < account.expenses.length; i++) {\r\n                expensesum += Number(account.expenses[i].amount)\r\n            }\r\n            if (account.expenses.length > 0)\r\n                account.totalExpense = expensesum\r\n            let incomesum = 0\r\n\r\n            for (let i = 0; i < account.incomes.length; i++) {\r\n                incomesum += Number(account.incomes[i].amount)\r\n            }\r\n            if (account.incomes.length > 0)\r\n                account.totalIncome = incomesum\r\n\r\n            account.networth = account.totalIncome - account.totalExpense\r\n\r\n            account.totalExpenseInCurrency = wrappCurrency(account.totalExpense)\r\n\r\n            account.totalIncomeInCurrency = wrappCurrency(account.totalIncome)\r\n            return account\r\n        })\r\n\r\n        setAccount(accountClone)\r\n        // total expenses\r\n    }\r\n\r\n\r\n\r\n\r\n    function Addtransaction({ from, amount, date, note, type, category }) {\r\n\r\n        const validateFrom = validator(from)\r\n        if (validateFrom === false) {\r\n            console.log(\"from\")\r\n            alert(\"From values is missing or invalid\")\r\n            return\r\n        }\r\n        const validateAmount = validator(amount)\r\n        if (validateAmount === false) {\r\n            alert(\"Amount values is missing or invalid\")\r\n            return\r\n        }\r\n        const validateDate = validator(date)\r\n        if (validateDate === false) {\r\n            alert(\"Date values is missing or invalid\")\r\n            return\r\n        }\r\n        const validateNote = validator(note)\r\n        if (validateNote === false) {\r\n            alert(\"Note values is missing or invalid\")\r\n            return\r\n        }\r\n\r\n        const validateCategory = validator(category)\r\n        if (validateCategory === false) {\r\n            alert(\"Category values is missing or invalid\")\r\n            return\r\n        }\r\n\r\n        const validateType = validator(type)\r\n        if (validateType === false) {\r\n            alert(\"Type values is missing or invalid\")\r\n            return\r\n        }\r\n\r\n        if (validateType === true) {\r\n            if (type === \"Expense\") {\r\n                const accountClone = clone(accounts)\r\n                let foundaccount = accountClone.filter(account => account.name === from)\r\n                foundaccount = foundaccount[0]\r\n                const newExpense = {\r\n                    amount,\r\n                    date,\r\n                    note,\r\n                    type,\r\n                    category,\r\n                    amountInCurrency: currency + \"\" + amount\r\n                }\r\n                // foundaccount.incomes=[...foundaccount.incomesnewIncome,newExpense];\r\n\r\n                foundaccount.expenses = [...foundaccount.expenses, newExpense]\r\n\r\n                foundaccount.transactions = [...foundaccount.transactions, newExpense]\r\n\r\n                accountClone.map(account => {\r\n                    if (account.name === foundaccount.name)\r\n                        return foundaccount\r\n                })\r\n\r\n\r\n                UpdateAccount(accountClone)\r\n            } else {\r\n\r\n                const accountClone = clone(accounts)\r\n                let foundaccount = accountClone.filter(account => account.name === from)\r\n                foundaccount = foundaccount[0]\r\n                const newIncome = {\r\n                    amount,\r\n                    date,\r\n                    note,\r\n                    type,\r\n                    amountInCurrency: currency + \"\" + amount\r\n                }\r\n                foundaccount.incomes = [...foundaccount.incomes, newIncome]\r\n                foundaccount.transactions = [...foundaccount.transactions, newIncome]\r\n                accountClone.map(account => {\r\n                    if (account.name === foundaccount.name)\r\n                        return foundaccount\r\n                })\r\n\r\n                // setAccount(accountClone);\r\n                UpdateAccount(accountClone)\r\n\r\n\r\n            }\r\n        }\r\n        setAddTransactionBtnClicked(false)\r\n\r\n    }\r\n\r\n\r\n    function OpenAddTransactionForm(e) {\r\n        if (accounts.length < 1) {\r\n            alert(\"Must create at least one account\")\r\n            return;\r\n        }\r\n        if (addTransactionBtnClicked === false)\r\n            setAddTransactionBtnClicked(true)\r\n        else\r\n            setAddTransactionBtnClicked(false)\r\n    }\r\n    return (\r\n\r\n        <div className=\"content\">\r\n            <h1>Transaction</h1>\r\n            <div className=\"content_display\">\r\n                <Body className=\"transaction\">\r\n\r\n                    <div className=\"flex-container\">\r\n\r\n                        <div className=\"flex-item-left\">\r\n\r\n                            <Button className=\"trans-btn\" onClick={OpenAddTransactionForm}>\r\n                                + Transaction\r\n                            </Button>\r\n                            {\r\n                                addTransactionBtnClicked ?\r\n                                    (\r\n                                        <Dialog\r\n                                            modal\r\n                                            header=\"Add Transaction\"\r\n                                            hasCancel\r\n                                            onAction={() => {\r\n\r\n                                                setAddTransactionBtnClicked(false)\r\n                                                // setExample(null);\r\n                                            }}>\r\n                                            < AddTranactionForm\r\n                                                Addtransaction={Addtransaction}\r\n                                                setAddTransactionBtnClicked={setAddTransactionBtnClicked}\r\n                                            />\r\n                                        </Dialog>\r\n                                    ) : \"\"\r\n                            }\r\n\r\n                        </div>\r\n                        <div className=\"flex-item-right\">\r\n                            <RecentTransactionView />\r\n                            <TransactionTotalView />\r\n                        </div>\r\n\r\n                    </div>\r\n                </Body>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Transaction\r\n"],"names":["TransactionTotalView","_useContext","useContext","AppContext","accounts","expense","income","networth","setNetworth","totalIncome","totalExpenses","useEffect","console","log","_jsxs","className","children","_jsx","map","account","name","totalIncomeInCurrency","totalExpenseInCurrency","currency","setAccount","_useState","useState","_useState2","_slicedToArray","addTransactionBtnClicked","setAddTransactionBtnClicked","clone","o","JSON","parse","stringify","validator","value","undefined","wrappCurrency","val","UpdateAccount","accountClone","expensesum","i","expenses","length","Number","amount","totalExpense","incomesum","incomes","Body","Button","onClick","e","alert","Dialog","modal","header","hasCancel","onAction","AddTranactionForm","Addtransaction","_ref","from","date","note","type","category","validateType","foundaccount","filter","newExpense","amountInCurrency","concat","_toConsumableArray","transactions","newIncome","RecentTransactionView"],"sourceRoot":""}